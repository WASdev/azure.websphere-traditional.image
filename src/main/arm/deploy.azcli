#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

# -e: immediately exit if any command has a non-zero exit status
# -o: prevents errors in a pipeline from being masked
# IFS new value is less likely to cause confusing bugs when looping arrays or arguments (e.g. $@)

usage() { echo "Usage: $0 -n <deploymentName> -f <installKitFile> -i <subscriptionId> -g <resourceGroupName> -l <resourceGroupLocation>" 1>&2; exit 1; }

declare deploymentName=""
declare installKitFile=""
declare subscriptionId=""
declare resourceGroupName=""
declare resourceGroupLocation=""

# Initialize parameters specified from command line
while getopts ":n:f:i:g:l:" arg; do
	case "${arg}" in
		n)
			deploymentName=${OPTARG}
			;;
		f)
			installKitFile=${OPTARG}
			;;
		i)
			subscriptionId=${OPTARG}
			;;
		g)
			resourceGroupName=${OPTARG}
			;;
		l)
			resourceGroupLocation=${OPTARG}
			;;
		esac
done
shift $((OPTIND-1))

#Prompt for parameters is some required parameters are missing
if [[ -z "$deploymentName" ]]; then
	echo "Enter a name for this deployment:"
	read deploymentName
fi

if [[ ! -f "$installKitFile" ]]; then
	echo "The IBM Installation Manager Install Kit file is necessary to setup WAS ND."
	echo "Enter the path of IBM Installation Manager Install Kit:"
	read installKitFile
	[[ -f "$installKitFile" ]]
fi

if [[ -z "$subscriptionId" ]]; then
	echo "Your subscription ID can be looked up with the CLI using: az account show --out json "
	echo "Enter your subscription ID:"
	read subscriptionId
	[[ "${subscriptionId:?}" ]]
fi

if [[ -z "$resourceGroupName" ]]; then
	echo "This script will look for an existing resource group, otherwise a new one will be created "
	echo "You can create new resource groups with the CLI using: az group create "
	echo "Enter a resource group name"
	read resourceGroupName
	[[ "${resourceGroupName:?}" ]]
fi

if [[ -z "$resourceGroupLocation" ]]; then
	echo "If creating a *new* resource group, you need to set a location "
	echo "You can lookup locations with the CLI using: az account list-locations "
	
	echo "Enter resource group location:"
	read resourceGroupLocation
fi

if [ -z "$deploymentName" ] || [ ! -f "$installKitFile" ] || [ -z "$subscriptionId" ] || [ -z "$resourceGroupName" ]; then
	echo "Either one of deploymentName, installKitFile, subscriptionId and resourceGroupName is empty"
	usage
fi

#templateFile Path - template file to be used
templateFilePath="./mainTemplate.json"

if [ ! -f "$templateFilePath" ]; then
	echo "$templateFilePath not found"
	exit 1
fi

#parameter file path
parametersFilePath="./parameters.json"

if [ ! -f "$parametersFilePath" ]; then
	echo "$parametersFilePath not found"
	exit 1
fi

#login to azure using your credentials
az account show 1> /dev/null

if [ $? != 0 ]; then
	az login
fi

#set the default subscription id
az account set --subscription $subscriptionId

set +e

#Check for existing RG
az group show --name $resourceGroupName 1> /dev/null

if [ $? != 0 ]; then
	echo "Resource group with name" $resourceGroupName "could not be found. Creating new resource group.."
	set -e
	(
		set -x
		az group create --name $resourceGroupName --location $resourceGroupLocation 1> /dev/null
	)
	else
	echo "Using existing resource group..."
fi
resourceGroupLocation=$( az group show --name $resourceGroupName | jq -r '.location' )

#Create storage account and upload IBM Installation Manager install kit to storage account
#Create storage account if not existing
storageAccountName="${subscriptionId//-/}"
storageAccountName="${storageAccountName:0:19}"
storageAccountName="stage$storageAccountName"

if [[ -z $( az storage account list -o json | jq -r --arg accountName "$storageAccountName" '.[].name | select(. == $accountName)' ) ]]; then
	echo "Storage account with name" $storageAccountName "could not be found. Creating new storage account..."
	set -e
	(
		set -x
		az storage account create -l "$resourceGroupLocation" --sku "Standard_LRS" -g "$resourceGroupName" -n "$storageAccountName" >/dev/null 2>&1
	)
	else
	echo "Using existing storage account..."
fi

#Create storage container if not existing
storageContainerName=${resourceGroupName}"-stageartifacts"
storageContainerName=$( echo "$storageContainerName" | awk '{print tolower($0)}')
storageAccountKey=$( az storage account keys list -g "$resourceGroupName" -n "$storageAccountName" -o json | jq -r '.[0].value' )
if [[ $( az storage container exists --name "$storageContainerName" --account-name "$storageAccountName" -o json | jq '.exists') = false ]]; then
	echo "Storage container with name" $storageContainerName "could not be found. Creating new storage container..."
	set -e
	(
		set -x
		az storage container create -n "$storageContainerName" --account-name "$storageAccountName" --account-key "$storageAccountKey" >/dev/null 2>&1
	)
	else
	echo "Using existing storage container..."
fi

#Upload IBM Installation Manager install kit to storage container
fileName=$(basename "$installKitFile")
if [[ $( az storage blob exists -n "$fileName" -c "$storageContainerName" --account-name "$storageAccountName" -o json | jq '.exists') = false ]]; then
	echo "Storage blob with name" $fileName "could not be found. Creating new storage blob..."
	set -e
	(
		set -x
		az storage blob upload -f "$installKitFile" -c $storageContainerName -n "$fileName" --account-name "$storageAccountName" --account-key "$storageAccountKey"
	)
	else
	echo "Using existing storage blob..."
fi

set +u

#Get a 4-hour SAS Token for the artifacts container. Fall back to OSX date syntax if Linux syntax fails.
plusFourHoursUtc=$(date -u -v+4H +%Y-%m-%dT%H:%MZ 2>/dev/null)  || plusFourHoursUtc=$(date -u --date "$dte 4 hour" +%Y-%m-%dT%H:%MZ)

#Generate SAS token
sasToken=$( az storage container generate-sas -n "$storageContainerName" --permissions r --expiry "$plusFourHoursUtc" --account-name "$storageAccountName" --account-key "$storageAccountKey" -o json | sed 's/"//g')
blobEndpoint=$( az storage account show -n "$storageAccountName" -g "$resourceGroupName" -o json | jq -r '.primaryEndpoints.blob' )
installKitUri=$blobEndpoint$storageContainerName/"$fileName"?$sasToken

#parameters JSON
parametersJson=$( cat $parametersFilePath | jq '.parameters' )
parametersJson=$( echo "$parametersJson" | jq --arg uri "$installKitUri" '{"installKitUri": {"value":$uri}} + .' )
parametersJson=$( echo "$parametersJson" | jq -c '.' )

#Start deployment
echo "Starting deployment..."
(
	az group deployment create --name "$deploymentName" --resource-group "$resourceGroupName" \
		--template-file "$templateFilePath" --parameters "$parametersJson"
)

if [[ $? -eq 0 ]]; then
	echo "Template has been successfully deployed"
fi
